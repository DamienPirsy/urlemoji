let t = null
let active = null
let current = 0
const isDebug = true
const msgHolder = document.getElementById('msgHolder')
const debugHolder = document.getElementById('mirror')
const progress = document.getElementsByTagName('progress')[0]

/*
* Helper function to get an int between 2 values
* @param {integer}   min   Miniminum number
* @param {integer}   max   Maximum number
*/
getRandomInt = (min, max) => {
    return Math.floor(Math.random() * (max - min) + min);
}

/*
* Writes the status message
* @param {string}  msg
*/          
setToast = (msg) => {
    msgHolder.innerHTML = msg
}

/*
* Clears the status message
*/
clearToast = () =>  {
    setToast(' - ');
}

debugSequence = (sequence) => {
    mirror.innerHTML = sequence
}

/**
 * Updates the progress bar
 * @param {integer}   total    Total items
 * @param {step}      step     Current step
 */
updateBar = (total, step) => {
    progress.setAttribute('max', total);
    progress.setAttribute('value', step);
}

/**
 * Manages the "current" counter
 * @param {integer}   len    List length
 */
manageCurrent = (len) => {
    updateBar(len, current+1)
    current = (current >= len-1) ? 0 : current+1
}

/**
 * Converts the given sequence to actual emojis from the provided set and
 * returns it as string
 * @param  {string}  sequnce   Emoji sequence, ex. 001320
 * @param  {array}   elements  List of emoji to pick
 * @return {string}  urlString
 */
convertSequence = (sequence, elements) => {
    let urlString = '';
    [...sequence].forEach(function(number, index) {
        urlString += elements[number];
    });
    return urlString;
}

/**
 * General method
 * @param {string}   func    Function name
 * @param {string}   name    Display name
 * @param {boolean}  rst     Flag, play only once
 */
playExample = (func, name, rst = false) => {            

    // initialization
    location.hash = '';
    debugSequence('');
    clearTimeout(t);
    clearToast();
    current = -1;

    if(active != func) {
        setToast(name);
        active = func;

        // different handling
        if (func == 'runner') {
            road = Array(30).fill('_');
            roadLen = road.length;
            current = roadLen-1;
        }

        window[func](rst);
    } else {
        active = null
        updateBar(0,0)
    }
}

/**
 * Display the sequence in the url bar and in the debug area (if flag is active)
 * @param  {string} sequence
 */
show = (sequence) => {
    location.hash = sequence
    if (isDebug) {
        debugSequence(sequence)
    }
}


/**
 * Run moon course simulation. Frequency: 1s
 * @param  {boolean} rst
 */
moon = (rst) => {
    let seq = ['üåí', 'üåì', 'üåî', 'üåï', 'üåñ', 'üåó', 'üåò','üåë'];
    show(seq[current])
    t = setTimeout(moon, rst, 1000);
    manageCurrent(seq.length)
}


/**
 * This works slightly differently
 * @param {boolean}  rst
 */
runner = (rst) =>  {
    if (current < roadLen) {

        if (current == 0) {
            road[0] = 'üî•';
            road[current+1] = '_';            
            current = roadLen;
            if (rst) {
                show(road.join(''))
                clearTimeout(t);
                return;
            }
        } else {
            road[0] = '||';
            road[current] = 'üèÉ';
            road[current+1] = '_';
        }
    }
    show(road.join(''))
    current--;
    t = setTimeout(runner, rst, 150);
}

/**
 * Clock ticking, 1 sec = 1 hour
 * @param {boolean}  rst
 */
clocks = (rst) => {
    let seq = ['üïê','üïë','üïí','üïì','üïî','üïï','üïñ','üïó','üïò','üïô','üïö','üïõ'];
    show(seq[current])
    t = setTimeout(clocks, rst, 1000);
    manageCurrent(seq.length)
}

/**
 * Silly hearts and kisses
 * @param {boolean}  rst
 */
valentine = (rst) =>  {
    el = ['üíã', '‚†Ä', 'üíï', 'üíë', 'üíó', '', 'üòç', 'üíû']
    seq = ['0', '01', '011', '01111', '11112', '11121', '11211', '12111', '21113', '11131', '11311', '13111', '7','7','7','5', '4', '5', '4', '5', '4', '5', '6', '6', '6']

    // return if told to reset
    if (rst && current == seq.length-1) {
        clearTimeout(t);
        show('');
        return;
    }
    if (seq[current]) {
        show(convertSequence(seq[current], el))
    }
    t = setTimeout(valentine, rst, getRandomInt(400,600));
    manageCurrent(seq.length);
}

/**
 * Bad weather simple animation
 * @param {boolean}  rst
 */
weather = (rst) => {
    let el = ['‚†Ä', '‚òÄ', '‚òÅ', 'üå§', '‚õÖ', 'üå•', 'üå¶', 'üå©', 'üåß', '‚õà' ]
    let seq = ['0001000', '2001000', '2001002', '0201020', '2021202', '2023202', '2223222', '2224222', '2225222', '2226222',
                '2286222', '2286822', '2278827', '2728822', '2288822', '2288872', '7288822', '2298922', '2299822', '2289922',
                '2288922', '2288822', '2288722', '2288822', '2286822', '2286222', '2226222', '2225222', '2225822', '2225222',
                '2224220', '2024220', '2023020', '0203020', '0203000', '2003002', '0001002', '0001000', '0001000', '0001000']
    if (seq[current]) {
        show(convertSequence(seq[current], el))
    }
    t = setTimeout(weather, rst, getRandomInt(500, 1000));
    manageCurrent(seq.length)
}

/**
 * Small simulation with fixed animation
 * @param {boolean}  rst
 */
space = (rst) => {
    let seq = ["‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†™","‚†Ä‚†Ä‚°±‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†™","‚†Ä‚†Ä‚°±‚†Ü‚†Ä‚†Ü‚†Ä‚†Ä‚†Ä‚†™‚†™","‚†Ä‚°±‚†Ä‚†Ü‚†Ä‚†Ü‚†Ä‚†™‚†™‚†™","‚†Ä‚†Ä‚°±‚†Ü‚†Ä‚†Ü‚†Ä‚†Ü‚†™‚†™‚†™",
    "‚†Ä‚†Ä‚°±‚†Ä‚†Ü‚†Ä‚†Ü‚†Ä‚£ù‚†™‚†™","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ü‚†Ä‚†Ü‚†™‚†™‚†Ä","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ü‚†Ä‚£ù‚†™‚†Ä","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ü‚†™‚†Ä‚†Ä","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚£ù‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢é","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢é‚¢é","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢é‚¢é‚£ø",
    "‚†Ä‚†Ä‚°±‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢é‚¢é‚£ø","‚†Ä‚†Ä‚°±‚†Ü‚†Ü‚†Ä‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ü‚†Ü‚†Ä‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ü‚†Ä‚†Ü‚†Ü‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ü‚†Ä‚†Ü‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ü‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ü‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†¢‚†Ä‚†Ä‚†Ä‚¢é‚¢é‚£ø‚£è",
    "‚†Ä‚†Ä‚°±‚†°‚†¢‚†Ä‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†°‚†¢‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚°î‚†°‚†¢‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚°î‚†°‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚°î‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†∂‚†Ä‚†Ä‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†∂‚†∂‚†Ä‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†∂‚†∂‚†Ä‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†∂‚†∂‚¢é‚¢é‚£ø‚£è",
    "‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†∂‚¢é‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚£ù‚¢é‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚£ù‚£Ω‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚£ù‚£Ω‚£ø‚£è","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚£ì‚£Ω‚£ø‚¢Ø","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚££‚£Ω‚£ø‚¢Ø","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚££‚°≥‚£ø‚££","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚££‚°≥‚£ø‚££","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∑‚£ø‚££","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∑‚£ø‚†è",
    "‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∑‚£ø","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä‚†Ä","r‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°±‚†Ä‚†Ä‚†Ä","er‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°±‚†Ä‚†Ä","ver‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°±‚†Ä",
    "over‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°±","‚†Äover‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","e‚†Äover‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","me‚†Äover‚†Ä‚†Ä‚†Ä‚†Ä","ame‚†Äover‚†Ä‚†Ä‚†Ä","game‚†Äover‚†Ä‚†Ä","‚†Ägame‚†Äover‚†Ä","‚†Ägame‚†Äover‚†Ä","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ägame‚†Äover‚†Ä",
    "‚†Ägame‚†Äover‚†Ä","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä","insert‚†Äcoin","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä", "insert‚†Äcoin","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä", "insert‚†Äcoin","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä", "insert‚†Äcoin"]
    show(seq[current])
    t = setTimeout(space, rst, 200);
    manageCurrent(seq.length)
}

tetris = (rst) => {
    let seq = ["‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á","‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á","‚†Ä‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á","‚†Ä‚†Ä‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á","‚†Ä‚†Ä‚†Ä‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∂‚†Ä‚†Ä‚†Ä‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∂‚†Ä‚†Ä‚°á",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚†Ä‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚°á","‚†º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚°á","‚†Ä‚†º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚°á","‚†Ä‚†Ä‚†º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚°á","‚†Ä‚†Ä‚†Ä‚†º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†º‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†≤‚†Ä‚†Ä‚†Ä‚£§‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†Ä‚£§‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚£§‚°á",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚£ß‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£Ω‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£Ω‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢©‚°á","‚†ó‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢©‚°á","‚†Ä‚†ó‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢©‚°á","‚†Ä‚†Ä‚†ó‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢©‚°á","‚†Ä‚†Ä‚†Ä‚†ó‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢©‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†ó‚†Ä‚†Ä‚†Ä‚†Ä‚¢©‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ó‚†Ä‚†Ä‚†Ä‚¢©‚°á",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ó‚†Ä‚†Ä‚¢©‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ñ‚†Ä‚¢©‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ñ‚¢©‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚¢ø‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚°á","‚°ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚°á","‚†Ä‚°ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚°á","‚†Ä‚†Ä‚°ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚°á","‚†Ä‚†Ä‚†Ä‚°ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚°ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚°á",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ñ‚†Ä‚†Ä‚†Ä‚†∫‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ñ‚†Ä‚†Ä‚†∫‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†¶‚†Ñ‚†Ä‚†∫‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚°Ä‚†∫‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚°Ä‚†∫‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚°∫‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£∫‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£î‚°á","‚†∫‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£î‚°á","‚†Ä‚†∫‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£î‚°á",
    "‚†Ä‚†Ä‚†∫‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£î‚°á","‚†Ä‚†Ä‚†Ä‚†∫‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£î‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚†Ä‚†Ä‚†Ä‚†Ä‚£î‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚†Ä‚†Ä‚†Ä‚£î‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚†Ä‚†Ä‚£î‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ñ‚†Ä‚£î‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ã‚£î‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ü‚°á","‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ô‚°á"]
    show(seq[current])
    t = setTimeout(tetris, rst, 400);
    manageCurrent(seq.length)
}